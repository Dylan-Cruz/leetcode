{
    "name": "Product of Array Except Self",
    "number": "238",
    "url": "https://leetcode.com/problems/product-of-array-except-self/description/",
    "difficulty": "Medium",
    "topics": [
        "Array",
        "Prefix Sum"
    ],
    "description_html": "<p>Given an integer array <code>nums</code>, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is equal to the product of all the elements of</em> <code>nums</code> <em>except</em> <code>nums[i]</code>.</p>\n\n<p>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</p>\n\n<p>You must write an algorithm that runs in&nbsp;<code>O(n)</code>&nbsp;time and without using the division operation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> [24,12,8,6]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [-1,1,0,-3,3]\n<strong>Output:</strong> [0,0,9,0,0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-30 &lt;= nums[i] &lt;= 30</code></li>\n\t<li>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong>&nbsp;Can you solve the problem in <code>O(1)</code>&nbsp;extra&nbsp;space complexity? (The output array <strong>does not</strong> count as extra space for space complexity analysis.)</p>\n",
    "description_markdown": "Given an integer array `nums`, return *an array* `answer` *such that* `answer[i]` *is equal to the product of all the elements of* `nums` *except* `nums[i]`.\n\n\nThe product of any prefix or suffix of `nums` is **guaranteed** to fit in a **32-bit** integer.\n\n\nYou must write an algorithm that runs in\u00a0`O(n)`\u00a0time and without using the division operation.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** nums = [1,2,3,4]\n**Output:** [24,12,8,6]\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** nums = [-1,1,0,-3,3]\n**Output:** [0,0,9,0,0]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 105`\n* `-30 <= nums[i] <= 30`\n* The product of any prefix or suffix of `nums` is **guaranteed** to fit in a **32-bit** integer.\n\n\n\u00a0\n\n\n**Follow up:**\u00a0Can you solve the problem in `O(1)`\u00a0extra\u00a0space complexity? (The output array **does not** count as extra space for space complexity analysis.)\n\n\n",
    "solution_stub": "class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        "
}