{
    "name": "Find Nearest Point That Has the Same X or Y Coordinate",
    "number": "1779",
    "url": "https://leetcode.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate/",
    "difficulty": "Easy",
    "topics": [
        "Array"
    ],
    "description_html": "<p>You are given two integers, <code>x</code> and <code>y</code>, which represent your current location on a Cartesian grid: <code>(x, y)</code>. You are also given an array <code>points</code> where each <code>points[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> represents that a point exists at <code>(a<sub>i</sub>, b<sub>i</sub>)</code>. A point is <strong>valid</strong> if it shares the same x-coordinate or the same y-coordinate as your location.</p>\n\n<p>Return <em>the index <strong>(0-indexed)</strong> of the <strong>valid</strong> point with the smallest <strong>Manhattan distance</strong> from your current location</em>. If there are multiple, return <em>the valid point with the <strong>smallest</strong> index</em>. If there are no valid points, return <code>-1</code>.</p>\n\n<p>The <strong>Manhattan distance</strong> between two points <code>(x<sub>1</sub>, y<sub>1</sub>)</code> and <code>(x<sub>2</sub>, y<sub>2</sub>)</code> is <code>abs(x<sub>1</sub> - x<sub>2</sub>) + abs(y<sub>1</sub> - y<sub>2</sub>)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> x = 3, y = 4, points = [[3,4]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The answer is allowed to be on the same location as your current location.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> x = 3, y = 4, points = [[2,3]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There are no valid points.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= points.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>1 &lt;= x, y, a<sub>i</sub>, b<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
    "description_markdown": "You are given two integers, `x` and `y`, which represent your current location on a Cartesian grid: `(x, y)`. You are also given an array `points` where each `points[i] = [ai, bi]` represents that a point exists at `(ai, bi)`. A point is **valid** if it shares the same x-coordinate or the same y-coordinate as your location.\n\n\nReturn *the index **(0-indexed)** of the **valid** point with the smallest **Manhattan distance** from your current location*. If there are multiple, return *the valid point with the **smallest** index*. If there are no valid points, return `-1`.\n\n\nThe **Manhattan distance** between two points `(x1, y1)` and `(x2, y2)` is `abs(x1 - x2) + abs(y1 - y2)`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]\n**Output:** 2\n**Explanation:** Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2.\n```\n\n**Example 2:**\n\n\n\n```\n**Input:** x = 3, y = 4, points = [[3,4]]\n**Output:** 0\n**Explanation:** The answer is allowed to be on the same location as your current location.\n```\n\n**Example 3:**\n\n\n\n```\n**Input:** x = 3, y = 4, points = [[2,3]]\n**Output:** -1\n**Explanation:** There are no valid points.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= points.length <= 104`\n* `points[i].length == 2`\n* `1 <= x, y, ai, bi <= 104`\n\n\n",
    "solution_stub": "class Solution:\n    def nearestValidPoint(self, x: int, y: int, points: List[List[int]]) -> int:\n        "
}