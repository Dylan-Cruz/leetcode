{
    "name": "Generate Parentheses",
    "number": "22",
    "url": "https://leetcode.com/problems/generate-parentheses/",
    "difficulty": "Medium",
    "topics": [
        "String",
        "Dynamic Programming",
        "Backtracking"
    ],
    "description_html": "<p>Given <code>n</code> pairs of parentheses, write a function to <em>generate all combinations of well-formed parentheses</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 3\n<strong>Output:</strong> [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> [\"()\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 8</code></li>\n</ul>\n",
    "description_markdown": "Given `n` pairs of parentheses, write a function to *generate all combinations of well-formed parentheses*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** n = 3\n**Output:** [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** n = 1\n**Output:** [\"()\"]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 8`\n\n\n",
    "solution_stub": "class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        "
}