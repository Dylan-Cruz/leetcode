{
    "name": "Top K Frequent Elements",
    "number": "347",
    "url": "https://leetcode.com/problems/top-k-frequent-elements/description/",
    "difficulty": "Medium",
    "topics": [
        "Array",
        "Hash Table",
        "Divide and Conquer",
        "Sorting",
        "Heap (Priority Queue)",
        "Bucket Sort",
        "Counting",
        "Quickselect"
    ],
    "description_html": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k</code> <em>most frequent elements</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,1,2,2,3], k = 2\n<strong>Output:</strong> [1,2]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1], k = 1\n<strong>Output:</strong> [1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>k</code> is in the range <code>[1, the number of unique elements in the array]</code>.</li>\n\t<li>It is <strong>guaranteed</strong> that the answer is <strong>unique</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Your algorithm's time complexity must be better than <code>O(n log n)</code>, where n is the array's size.</p>\n",
    "description_markdown": "Given an integer array `nums` and an integer `k`, return *the* `k` *most frequent elements*. You may return the answer in **any order**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** nums = [1,1,1,2,2,3], k = 2\n**Output:** [1,2]\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** nums = [1], k = 1\n**Output:** [1]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `-104 <= nums[i] <= 104`\n* `k` is in the range `[1, the number of unique elements in the array]`.\n* It is **guaranteed** that the answer is **unique**.\n\n\n\u00a0\n\n\n**Follow up:** Your algorithm's time complexity must be better than `O(n log n)`, where n is the array's size.\n\n\n",
    "solution_stub": "class Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        "
}