{
    "name": "Valid Anagram",
    "number": "242",
    "url": "https://leetcode.com/problems/valid-anagram/description/",
    "difficulty": "Easy",
    "topics": [
        "Hash Table",
        "String",
        "Sorting"
    ],
    "description_html": "<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> <em>if</em> <code>t</code> <em>is an anagram of</em> <code>s</code><em>, and</em> <code>false</code> <em>otherwise</em>.</p>\n\n<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"anagram\", t = \"nagaram\"\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"rat\", t = \"car\"\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, t.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> What if the inputs contain Unicode characters? How would you adapt your solution to such a case?</p>\n",
    "description_markdown": "Given two strings `s` and `t`, return `true` *if* `t` *is an anagram of* `s`*, and* `false` *otherwise*.\n\n\nAn **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** s = \"anagram\", t = \"nagaram\"\n**Output:** true\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** s = \"rat\", t = \"car\"\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length, t.length <= 5 * 104`\n* `s` and `t` consist of lowercase English letters.\n\n\n\u00a0\n\n\n**Follow up:** What if the inputs contain Unicode characters? How would you adapt your solution to such a case?\n\n\n",
    "solution_stub": "class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        "
}