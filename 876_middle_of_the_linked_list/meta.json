{
    "name": "Middle of the Linked List",
    "number": "876",
    "url": "https://leetcode.com/problems/middle-of-the-linked-list/description/",
    "difficulty": "Easy",
    "topics": [
        "Linked List",
        "Two Pointers"
    ],
    "description_html": "<p>Given the <code>head</code> of a singly linked list, return <em>the middle node of the linked list</em>.</p>\n\n<p>If there are two middle nodes, return <strong>the second middle</strong> node.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-midlist1.jpg\" style=\"width: 544px; height: 65px;\">\n<pre><strong>Input:</strong> head = [1,2,3,4,5]\n<strong>Output:</strong> [3,4,5]\n<strong>Explanation:</strong> The middle node of the list is node 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-midlist2.jpg\" style=\"width: 664px; height: 65px;\">\n<pre><strong>Input:</strong> head = [1,2,3,4,5,6]\n<strong>Output:</strong> [4,5,6]\n<strong>Explanation:</strong> Since the list has two middle nodes with values 3 and 4, we return the second one.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[1, 100]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
    "description_markdown": "Given the `head` of a singly linked list, return *the middle node of the linked list*.\n\n\nIf there are two middle nodes, return **the second middle** node.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://assets.leetcode.com/uploads/2021/07/23/lc-midlist1.jpg)\n\n```\n**Input:** head = [1,2,3,4,5]\n**Output:** [3,4,5]\n**Explanation:** The middle node of the list is node 3.\n\n```\n\n**Example 2:**\n\n\n![](https://assets.leetcode.com/uploads/2021/07/23/lc-midlist2.jpg)\n\n```\n**Input:** head = [1,2,3,4,5,6]\n**Output:** [4,5,6]\n**Explanation:** Since the list has two middle nodes with values 3 and 4, we return the second one.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the list is in the range `[1, 100]`.\n* `1 <= Node.val <= 100`\n\n\n",
    "solution_stub": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        "
}